{
  "openapi": "3.0.4",
  "info": {
    "title": "Note Sharing API",
    "description": "An ASP.NET Core Web API for the sharing of notes",
    "version": "v1"
  },
  "paths": {
    "/api/Auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registers a new user with basic credentials (Name, Email, Password).\r\nThis endpoint is intended for simple user registration and does not accept additional user data.\r\nTo add more user information, use a different endpoint.\r\n\r\n\r\nRequired fields in class_library.DTO.RegisterDTO:<list type=\"bullet\"><item><description><b>UserName</b>: string (required)</description></item><item><description><b>Email</b>: string, must be a valid email address (required)</description></item><item><description><b>Password</b>: string (required)</description></item></list>",
        "requestBody": {
          "description": "The registration data for the new user.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Authenticates a user using their email and password.\r\n\r\n\r\nRequired fields in class_library.DTO.LoginDTO:<list type=\"bullet\"><item><description><b>Email</b>: string, must be a valid email address (required)</description></item><item><description><b>Password</b>: string (required)</description></item></list>",
        "requestBody": {
          "description": "The login credentials for the user.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refreshes the user's authentication tokens using a valid refresh token.\r\n\r\n\r\nRequired field in class_library.DTO.RefreshTokenDTO:<list type=\"bullet\"><item><description><b>RefreshToken</b>: string (required)</description></item></list>",
        "requestBody": {
          "description": "The refresh token data for the user.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Auth/test": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Test endpoint to confirm if the authentication mechanism is working.\r\n\r\n\r\nThis endpoint requires a valid JWT access token in the Authorization header.\r\nIf the token is valid, it returns basic user details extracted from the token.",
        "description": "<b>Authorization:</b> Bearer token required.\r\n<b>Response:</b><list type=\"bullet\"><item><description><b>message</b>: Confirmation that authentication is successful.</description></item><item><description><b>userDetails</b>: Object containing `id`, `name`, `email`, and `role` from the token claims.</description></item></list>",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Institution": {
      "post": {
        "tags": [
          "Institution"
        ],
        "summary": "Creates a new institution record.",
        "requestBody": {
          "description": "The data transfer object containing details of the institution to be created.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InstitutionCreateDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstitutionCreateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InstitutionCreateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InstitutionCreateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created institution details."
          },
          "400": {
            "description": "Returned when validation fails or an exception occurs."
          }
        }
      },
      "put": {
        "tags": [
          "Institution"
        ],
        "summary": "Updates an existing institution record.",
        "requestBody": {
          "description": "The institution data transfer object containing updated values.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InstitutionViewDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstitutionViewDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InstitutionViewDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InstitutionViewDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated institution details."
          },
          "400": {
            "description": "Returned when the institution does not exist or an exception occurs."
          }
        }
      },
      "get": {
        "tags": [
          "Institution"
        ],
        "summary": "Retrieves all active institutions.",
        "responses": {
          "200": {
            "description": "Returns a list of all active institutions."
          },
          "400": {
            "description": "Returned when no institutions are found or an exception occurs."
          }
        }
      }
    },
    "/api/Institution/{id}": {
      "delete": {
        "tags": [
          "Institution"
        ],
        "summary": "Deletes (sets inactive) an institution record by its unique identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the institution to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates the institution was successfully deleted (set inactive)."
          },
          "400": {
            "description": "Returned when the institution is not found or an exception occurs."
          }
        }
      },
      "get": {
        "tags": [
          "Institution"
        ],
        "summary": "Retrieves a specific institution by its unique identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the institution to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested institution details."
          },
          "400": {
            "description": "Returned when the institution is not found or an exception occurs."
          }
        }
      }
    },
    "/api/Preference": {
      "post": {
        "tags": [
          "Preference"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PreferenceViewDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreferenceViewDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PreferenceViewDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PreferenceViewDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Preference"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PreferenceViewDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreferenceViewDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PreferenceViewDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PreferenceViewDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Preference/{id}": {
      "delete": {
        "tags": [
          "Preference"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Preference"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Subject": {
      "post": {
        "tags": [
          "Subject"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectCreateDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectCreateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectCreateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectCreateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Subject"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectViewDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectViewDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectViewDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectViewDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Subject"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Subject/{id}": {
      "delete": {
        "tags": [
          "Subject"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Subject"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/User": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "This endpoint is for adding additional user information or modifying the existing one.\r\nOnly the fields in class_library.DTO.UserUpdateDTO that are provided (not null) will be updated; all others will remain unchanged.\r\nThe `ID` field is required to identify the user to update.",
        "requestBody": {
          "description": "The user update data transfer object. Except for `ID`, all properties should be null unless they are to be changed.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/User/{id}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a user by their unique identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the user to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/User/id/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves a user by their unique identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/User/username/{userName}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves a user by their username.",
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "The username of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/User/follow": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Adds a one sided following relationship between two users.",
        "requestBody": {
          "description": "The user follow data transfer object.\r\n\r\n<b>Properties of class_library.DTO.UserFollowDTO:</b><list type=\"bullet\"><item><description>`FollowerUserID` (System.Guid): The unique identifier of the user who is following.</description></item><item><description>`FollowingUserID` (System.Guid): The unique identifier of the user being followed.</description></item></list>",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserFollowDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserFollowDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserFollowDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserFollowDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EUserType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "InstitutionCreateDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "InstitutionViewDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginDTO": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PreferenceViewDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "prioritiseUsersFromInstitution": {
            "type": "boolean"
          },
          "prioritiseInstructorNotes": {
            "type": "boolean"
          },
          "privateMyNotes": {
            "type": "boolean"
          },
          "prioritiseRatedNotes": {
            "type": "boolean"
          },
          "prioritiseFollowedUsers": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RefreshTokenDTO": {
        "required": [
          "refreshToken"
        ],
        "type": "object",
        "properties": {
          "refreshToken": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RegisterDTO": {
        "required": [
          "email",
          "password",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SubjectCreateDTO": {
        "required": [
          "institutionID",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "institutionID": {
            "type": "string",
            "format": "uuid"
          },
          "instructorID": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubjectViewDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "institutionID": {
            "type": "string",
            "format": "uuid"
          },
          "instructorID": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserFollowDTO": {
        "type": "object",
        "properties": {
          "followerUserID": {
            "type": "string",
            "format": "uuid"
          },
          "followedUserID": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "UserUpdateDTO": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "userType": {
            "$ref": "#/components/schemas/EUserType"
          },
          "institutionID": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "grade": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}