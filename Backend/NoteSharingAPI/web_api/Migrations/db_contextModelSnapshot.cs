// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using web_api.Lib.Database;

#nullable disable

namespace web_api.Migrations
{
    [DbContext(typeof(db_context))]
    partial class db_contextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("class_library.Models.Institution", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Institutions", (string)null);
                });

            modelBuilder.Entity("class_library.Models.Log", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("class_library.Models.Preference", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PrioritiseFollowedUsers")
                        .HasColumnType("bit");

                    b.Property<bool>("PrioritiseInstructorNotes")
                        .HasColumnType("bit");

                    b.Property<bool>("PrioritiseRatedNotes")
                        .HasColumnType("bit");

                    b.Property<bool>("PrioritiseUsersFromInstitution")
                        .HasColumnType("bit");

                    b.Property<bool>("PrivateMyNotes")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Preferences", (string)null);
                });

            modelBuilder.Entity("class_library.Models.Subject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InstitutionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InstructorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("InstitutionID");

                    b.HasIndex("InstructorID");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("class_library.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InstitutionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionType")
                        .HasColumnType("int");

                    b.Property<Guid>("PreferenceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("InstitutionID");

                    b.HasIndex("PreferenceID");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("class_library.Models.UserFollow", b =>
                {
                    b.Property<Guid>("FollowerUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowerUserID1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FollowerUserID", "FollowedUserID");

                    b.HasIndex("FollowerUserID1");

                    b.ToTable("UserFollows", (string)null);
                });

            modelBuilder.Entity("class_library.Models.UserSubject", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserID", "SubjectID");

                    b.HasIndex("SubjectID");

                    b.ToTable("UserSubjects", (string)null);
                });

            modelBuilder.Entity("class_library.Models.Subject", b =>
                {
                    b.HasOne("class_library.Models.Institution", "Institution")
                        .WithMany("Subjects")
                        .HasForeignKey("InstitutionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("class_library.Models.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Institution");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("class_library.Models.User", b =>
                {
                    b.HasOne("class_library.Models.Institution", "Institution")
                        .WithMany("Users")
                        .HasForeignKey("InstitutionID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("class_library.Models.Preference", "Preference")
                        .WithMany()
                        .HasForeignKey("PreferenceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("Preference");
                });

            modelBuilder.Entity("class_library.Models.UserFollow", b =>
                {
                    b.HasOne("class_library.Models.User", "FollowedUser")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("class_library.Models.User", "FollowerUser")
                        .WithMany("Followings")
                        .HasForeignKey("FollowerUserID1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FollowedUser");

                    b.Navigation("FollowerUser");
                });

            modelBuilder.Entity("class_library.Models.UserSubject", b =>
                {
                    b.HasOne("class_library.Models.Subject", "Subject")
                        .WithMany("UserSubjects")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("class_library.Models.User", "User")
                        .WithMany("UserSubjects")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("class_library.Models.Institution", b =>
                {
                    b.Navigation("Subjects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("class_library.Models.Subject", b =>
                {
                    b.Navigation("UserSubjects");
                });

            modelBuilder.Entity("class_library.Models.User", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("UserSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
